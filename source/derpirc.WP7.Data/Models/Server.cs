//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace derpirc.Data.Models
{
    [global::System.Data.Linq.Mapping.TableAttribute()]
    public partial class Server : IBaseModel, INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private int _NetworkId;

        private string _DisplayName;

        private string _HostName;

        private string _ConnectedHostName;

        private string _Ports;

        private string _Password;

        private EntityRef<Network> _Network;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNetworkIdChanging(int value);
        partial void OnNetworkIdChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnHostNameChanging(string value);
        partial void OnHostNameChanged();
        partial void OnConnectedHostNameChanging(string value);
        partial void OnConnectedHostNameChanged();
        partial void OnPortsChanging(string value);
        partial void OnPortsChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        #endregion

        public Server()
        {
            this._Network = default(EntityRef<Network>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DisplayName", DbType = "NVarChar(128)")]
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if ((this._DisplayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.SendPropertyChanging();
                    this._DisplayName = value;
                    this.SendPropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HostName", DbType = "NVarChar(128) NOT NULL", CanBeNull = false)]
        public string HostName
        {
            get
            {
                return this._HostName;
            }
            set
            {
                if ((this._HostName != value.ToLower()))
                {
                    this.OnHostNameChanging(value.ToLower());
                    this.SendPropertyChanging();
                    this._HostName = value.ToLower();
                    this.SendPropertyChanged("HostName");
                    this.OnHostNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HostName", DbType = "NVarChar(128) NOT NULL", CanBeNull = false)]
        public string ConnectedHostName
        {
            get
            {
                return this._ConnectedHostName;
            }
            set
            {
                if ((this._ConnectedHostName != value.ToLower()))
                {
                    this.OnConnectedHostNameChanging(value.ToLower());
                    this.SendPropertyChanging();
                    this._ConnectedHostName = value.ToLower();
                    this.SendPropertyChanged("ConnectedHostName");
                    this.OnConnectedHostNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NetworkId", DbType = "Int NOT NULL")]
        public int NetworkId
        {
            get
            {
                return this._NetworkId;
            }
            set
            {
                if ((this._NetworkId != value))
                {
                    if (this._Network.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnNetworkIdChanging(value);
                    this.SendPropertyChanging();
                    this._NetworkId = value;
                    this.SendPropertyChanged("NetworkId");
                    this.OnNetworkIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Ports", DbType = "NVarChar(256)")]
        public string Ports
        {
            get
            {
                return this._Ports;
            }
            set
            {
                if ((this._Ports != value))
                {
                    this.OnPortsChanging(value);
                    this.SendPropertyChanging();
                    this._Ports = value;
                    this.SendPropertyChanged("Ports");
                    this.OnPortsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "NVarChar(128)")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_Network_Server", Storage = "_Network", ThisKey = "NetworkId", OtherKey = "Id", IsForeignKey = true)]
        public Network Network
        {
            get
            {
                return this._Network.Entity;
            }
            set
            {
                Network previousValue = this._Network.Entity;
                if (((previousValue != value)
                            || (this._Network.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Network.Entity = null;
                        previousValue.Server = null;
                    }
                    this._Network.Entity = value;
                    if ((value != null))
                    {
                        value.Server = this;
                        this._NetworkId = value.Id;
                    }
                    else
                    {
                        this._NetworkId = default(int);
                    }
                    this.SendPropertyChanged("Network");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
