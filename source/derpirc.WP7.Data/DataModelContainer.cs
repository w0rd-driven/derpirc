//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;
using System.IO.IsolatedStorage;
using System.Linq;
using System.Reflection;
using derpirc.Data.Models;

namespace derpirc.Data
{
    public partial class DataModelContainer : System.Data.Linq.DataContext
    {
        public static string ConnectionString = "Data Source=isostore:/IRC.sdf";

        public static string FileName = "IRC.sdf";

        public DataModelContainer()
            : base(ConnectionString)
        {
            OnCreated();
        }

        public DataModelContainer(string connectionString)
            : base(connectionString)
        {
            OnCreated();
        }

        public bool CreateIfNotExists()
        {
            bool created = false;
            using (var db = new DataModelContainer(DataModelContainer.ConnectionString))
            {
                if (!db.DatabaseExists())
                {
                    string[] names = this.GetType().Assembly.GetManifestResourceNames();
                    string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
                    if (name != null)
                    {
                        using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
                        {
                            if (resourceStream != null)
                            {
                                using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
                                {
                                    using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, System.IO.FileMode.Create, myIsolatedStorage))
                                    {
                                        using (BinaryWriter writer = new BinaryWriter(fileStream))
                                        {
                                            long length = resourceStream.Length;
                                            byte[] buffer = new byte[32];
                                            int readCount = 0;
                                            using (BinaryReader reader = new BinaryReader(resourceStream))
                                            {
                                                // read file in chunks in order to reduce memory consumption and increase performance
                                                while (readCount < length)
                                                {
                                                    int actual = reader.Read(buffer, 0, buffer.Length);
                                                    readCount += actual;
                                                    writer.Write(buffer, 0, actual);
                                                }
                                            }
                                        }
                                    }
                                }
                                created = true;
                            }
                            else
                            {
                                db.CreateDatabase();
                                created = true;
                            }
                        }
                    }
                    else
                    {
                        db.CreateDatabase();
                        created = true;
                    }
                }
            }
            return created;
        }

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertChannel(Channel instance);
        partial void UpdateChannel(Channel instance);
        partial void DeleteChannel(Channel instance);
        partial void InsertChannelItem(ChannelItem instance);
        partial void UpdateChannelItem(ChannelItem instance);
        partial void DeleteChannelItem(ChannelItem instance);
        partial void InsertMention(Mention instance);
        partial void UpdateMention(Mention instance);
        partial void DeleteMention(Mention instance);
        partial void InsertMentionItem(MentionItem instance);
        partial void UpdateMentionItem(MentionItem instance);
        partial void DeleteMentionItem(MentionItem instance);
        partial void InsertMessage(Message instance);
        partial void UpdateMessage(Message instance);
        partial void DeleteMessage(Message instance);
        partial void InsertMessageItem(MessageItem instance);
        partial void UpdateMessageItem(MessageItem instance);
        partial void DeleteMessageItem(MessageItem instance);
        partial void InsertNetwork(Network instance);
        partial void UpdateNetwork(Network instance);
        partial void DeleteNetwork(Network instance);
        partial void InsertServer(Server instance);
        partial void UpdateServer(Server instance);
        partial void DeleteServer(Server instance);
        partial void InsertSession(Session instance);
        partial void UpdateSession(Session instance);
        partial void DeleteSession(Session instance);
        #endregion

        #region Table Properties

        public System.Data.Linq.Table<Channel> Channels
        {
            get
            {
                return this.GetTable<Channel>();
            }
        }

        public System.Data.Linq.Table<ChannelItem> ChannelItems
        {
            get
            {
                return this.GetTable<ChannelItem>();
            }
        }

        public System.Data.Linq.Table<Mention> Mentions
        {
            get
            {
                return this.GetTable<Mention>();
            }
        }

        public System.Data.Linq.Table<MentionItem> MentionItems
        {
            get
            {
                return this.GetTable<MentionItem>();
            }
        }

        public System.Data.Linq.Table<Message> Messages
        {
            get
            {
                return this.GetTable<Message>();
            }
        }

        public System.Data.Linq.Table<MessageItem> MessageItems
        {
            get
            {
                return this.GetTable<MessageItem>();
            }
        }

        public System.Data.Linq.Table<Network> Networks
        {
            get
            {
                return this.GetTable<Network>();
            }
        }

        public System.Data.Linq.Table<Server> Servers
        {
            get
            {
                return this.GetTable<Server>();
            }
        }

        public System.Data.Linq.Table<Session> Sessions
        {
            get
            {
                return this.GetTable<Session>();
            }
        }

        #endregion

        #region Method Overrides

        public void InitializeDatabase()
        {
            using (IsolatedStorageFile iso = IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (iso.FileExists(FileName))
                    return;

                CreateDatabase();
            }
        }

        public void InitializeDatabase(bool wipe)
        {
            using (IsolatedStorageFile iso = IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (wipe)
                    WipeDatabase(iso);
                else
                {
                    if (iso.FileExists(FileName))
                        return;
                }

                CreateDatabase();
            }
        }

        private new void CreateDatabase()
        {
            try
            {
                // Generate the database (with structure) from the code-based data context
                base.CreateDatabase();

                // Populate the database with system data
                GenerateSystemData();
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Error while creating the DB: " + ex.Message);
                System.Diagnostics.Debug.WriteLine("Error while creating the DB: " + ex.Message);
            }
        }

        public void WipeDatabase(IsolatedStorageFile iso)
        {
            if (iso.FileExists(FileName))
                iso.DeleteFile(FileName);
        }

        public bool DatabaseExists(bool overrideResult = false)
        {
            if (!overrideResult)
            {
                using (IsolatedStorageFile iso = IsolatedStorageFile.GetUserStoreForApplication())
                {
                    if (iso.FileExists(FileName))
                        return true;
                    else
                        return false;
                }
            }
            else
                return false;
        }

        private void GenerateSystemData()
        {
            var session = Factory.CreateSession();
            this.Sessions.InsertOnSubmit(session);
            this.SubmitChanges();
        }

        #endregion
    }
}
